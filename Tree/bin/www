#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('Tree:server');
var http = require('http');

/*mongoose*/
/*
var mongoose = require('mongoose');
messageSchema = mongoose.Schema({
  name: String,
  message: String,
  date: Date
});
mongoose.model('messages',messageSchema);
*/
//mongoose.connect('mongodb://localhost:3000/messageDB');
//var Messages = mongoose.model('messages');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


var io = require('socket.io').listen(server);
io.sockets.on('connection', function (socket) {

 console.log('a user connected');

 socket.on('send message', function(msg){
   console.log('message: ' + msg);
   io.emit('received message', msg);

   /*
   data.date = Date.parse(data.date);
   var message = new Messages(data);
   message.save(function(err, message) {
   if (err) return console.error(err);
     io.emit('chat message', message);
   });
   */
 });



 socket.on('disconnect', function(){
   console.log('user disconnected');
 });

});

 /**
  * Normalize a port into a number, string, or false.
  */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

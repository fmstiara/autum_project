#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('Tree:server');
var http = require('http');
var mongodb = require('mongodb');
var dbserver = new mongodb.Server('localhost', 33333);
var db = new mongodb.Db('messagesdb', dbserver, {safe: true});
var brunchCounter = 0;
var maxBrunchNumber = 0;


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


var io = require('socket.io').listen(server);
io.sockets.on('connection', function (socket) {

  //更新時の処理
  console.log('a user connected');
  db.open(function (err, db){
     if(err){
       throw err;
     }
     var collection = db.collection('message');
     collection.find().each(function(err, item){
       if(err){
         throw err;
       }
       if(item != null){
         if(maxBrunchNumber < item.brunchNumber){
           maxBrunchNumber = item.brunchNumber;
         }
       }
     });
     collection.find().each(function(err, doc){
       if(err){
         throw err;
       }
       if(doc != null){
         if( doc.brunchNumber === brunchCounter ){
           io.emit('received message', doc);
         }
       }

     });

  });

  //messagaがクライアントから送信された時
  socket.on('send message', function(msgInfo){
    if(msgInfo.brunch){
      maxBrunchNumber++;
      msgInfo.brunchNumber = maxBrunchNumber;
      brunchCounter = maxBrunchNumber;
    } else {
      msgInfo.brunchNumber = brunchCounter;
    }
    db.open(function (err, db){
      if(err){
        throw err;
      }
      var collection = db.collection('message');
      collection.insert(msgInfo, function( err, result ){
        if(err){
          throw err;
        }
        console.log(result);

      })

      io.emit('html remove', 0);
      collection.find().each(function(err, doc){
        if(err){
          throw err;
        }
        if(doc != null){
          if( doc.brunchNumber === brunchCounter ){
            io.emit('received message', doc);
          }
        }
      });

    });
  });

  //commandキーが押されたとき
  socket.on('brunch change', function(msg){
    brunchCounter += msg;
    if(brunchCounter > maxBrunchNumber){
      brunchCounter=0;
    }
    console.log("brunchCounter" + brunchCounter);
    socket.setMaxListeners(10);
    db.open(function (err, db){
      if(err){
        throw err;
      }
      var collection = db.collection('message');
      io.emit('html remove', 0);
      /*↓eachだとプロセスを呼びすぎるからarrayで送って
        クライアント側で繰り返す
      */
      collection.find().each(function(err, doc){
        if(err){
          throw err;
        }
        if(doc != null){
          if( doc.brunchNumber === brunchCounter ){
            io.emit('received message', doc);
          }
        }
      });

    });
  });

  //ボタンを押すとデータベースが吹っ飛ぶ
   socket.on('send reset', function(msg){
     db.open(function (err, db){
       if(err){
         throw err;
       }
       var collection = db.collection('message');
       collection.remove({},{},function( err, numberOfRemovedDocs ){
         if(err){
           throw err;
         }
         console.log(numberOfRemovedDocs);
       });

       maxBrunchNumber = 0;
       brunchCounter = 0;
     });
   });


   socket.on('disconnect', function(){
     console.log('user disconnected');
   });

});

 /**
  * Normalize a port into a number, string, or false.
  */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
